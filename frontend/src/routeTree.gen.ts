/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from "@tanstack/react-router";

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as IndexImport } from "./routes/index";
import { Route as BooksIndexImport } from "./routes/books/index";
import { Route as BooksBookIdRouteImport } from "./routes/books/$bookId/route";
import { Route as BooksBookIdIndexImport } from "./routes/books/$bookId/index";
import { Route as BooksBookIdReviewsRouteImport } from "./routes/books/$bookId/reviews/route";
import { Route as BooksBookIdReviewsIndexImport } from "./routes/books/$bookId/reviews/index";

// Create Virtual Routes

const AboutIndexLazyImport = createFileRoute("/about/")();

// Create/Update Routes

const IndexRoute = IndexImport.update({
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

const AboutIndexLazyRoute = AboutIndexLazyImport.update({
  path: "/about/",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/about/index.lazy").then((d) => d.Route));

const BooksIndexRoute = BooksIndexImport.update({
  path: "/books/",
  getParentRoute: () => rootRoute,
} as any);

const BooksBookIdRouteRoute = BooksBookIdRouteImport.update({
  path: "/books/$bookId",
  getParentRoute: () => rootRoute,
} as any);

const BooksBookIdIndexRoute = BooksBookIdIndexImport.update({
  path: "/",
  getParentRoute: () => BooksBookIdRouteRoute,
} as any);

const BooksBookIdReviewsRouteRoute = BooksBookIdReviewsRouteImport.update({
  path: "/reviews",
  getParentRoute: () => BooksBookIdRouteRoute,
} as any);

const BooksBookIdReviewsIndexRoute = BooksBookIdReviewsIndexImport.update({
  path: "/",
  getParentRoute: () => BooksBookIdReviewsRouteRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    "/books/$bookId": {
      id: "/books/$bookId";
      path: "/books/$bookId";
      fullPath: "/books/$bookId";
      preLoaderRoute: typeof BooksBookIdRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/books/": {
      id: "/books/";
      path: "/books";
      fullPath: "/books";
      preLoaderRoute: typeof BooksIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/about/": {
      id: "/about/";
      path: "/about";
      fullPath: "/about";
      preLoaderRoute: typeof AboutIndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/books/$bookId/reviews": {
      id: "/books/$bookId/reviews";
      path: "/reviews";
      fullPath: "/books/$bookId/reviews";
      preLoaderRoute: typeof BooksBookIdReviewsRouteImport;
      parentRoute: typeof BooksBookIdRouteImport;
    };
    "/books/$bookId/": {
      id: "/books/$bookId/";
      path: "/";
      fullPath: "/books/$bookId/";
      preLoaderRoute: typeof BooksBookIdIndexImport;
      parentRoute: typeof BooksBookIdRouteImport;
    };
    "/books/$bookId/reviews/": {
      id: "/books/$bookId/reviews/";
      path: "/";
      fullPath: "/books/$bookId/reviews/";
      preLoaderRoute: typeof BooksBookIdReviewsIndexImport;
      parentRoute: typeof BooksBookIdReviewsRouteImport;
    };
  }
}

// Create and export the route tree

interface BooksBookIdReviewsRouteRouteChildren {
  BooksBookIdReviewsIndexRoute: typeof BooksBookIdReviewsIndexRoute;
}

const BooksBookIdReviewsRouteRouteChildren: BooksBookIdReviewsRouteRouteChildren =
  {
    BooksBookIdReviewsIndexRoute: BooksBookIdReviewsIndexRoute,
  };

const BooksBookIdReviewsRouteRouteWithChildren =
  BooksBookIdReviewsRouteRoute._addFileChildren(
    BooksBookIdReviewsRouteRouteChildren,
  );

interface BooksBookIdRouteRouteChildren {
  BooksBookIdReviewsRouteRoute: typeof BooksBookIdReviewsRouteRouteWithChildren;
  BooksBookIdIndexRoute: typeof BooksBookIdIndexRoute;
}

const BooksBookIdRouteRouteChildren: BooksBookIdRouteRouteChildren = {
  BooksBookIdReviewsRouteRoute: BooksBookIdReviewsRouteRouteWithChildren,
  BooksBookIdIndexRoute: BooksBookIdIndexRoute,
};

const BooksBookIdRouteRouteWithChildren =
  BooksBookIdRouteRoute._addFileChildren(BooksBookIdRouteRouteChildren);

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/books/$bookId": typeof BooksBookIdRouteRouteWithChildren;
  "/books": typeof BooksIndexRoute;
  "/about": typeof AboutIndexLazyRoute;
  "/books/$bookId/reviews": typeof BooksBookIdReviewsRouteRouteWithChildren;
  "/books/$bookId/": typeof BooksBookIdIndexRoute;
  "/books/$bookId/reviews/": typeof BooksBookIdReviewsIndexRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/books": typeof BooksIndexRoute;
  "/about": typeof AboutIndexLazyRoute;
  "/books/$bookId": typeof BooksBookIdIndexRoute;
  "/books/$bookId/reviews": typeof BooksBookIdReviewsIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexRoute;
  "/books/$bookId": typeof BooksBookIdRouteRouteWithChildren;
  "/books/": typeof BooksIndexRoute;
  "/about/": typeof AboutIndexLazyRoute;
  "/books/$bookId/reviews": typeof BooksBookIdReviewsRouteRouteWithChildren;
  "/books/$bookId/": typeof BooksBookIdIndexRoute;
  "/books/$bookId/reviews/": typeof BooksBookIdReviewsIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/books/$bookId"
    | "/books"
    | "/about"
    | "/books/$bookId/reviews"
    | "/books/$bookId/"
    | "/books/$bookId/reviews/";
  fileRoutesByTo: FileRoutesByTo;
  to: "/" | "/books" | "/about" | "/books/$bookId" | "/books/$bookId/reviews";
  id:
    | "__root__"
    | "/"
    | "/books/$bookId"
    | "/books/"
    | "/about/"
    | "/books/$bookId/reviews"
    | "/books/$bookId/"
    | "/books/$bookId/reviews/";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  BooksBookIdRouteRoute: typeof BooksBookIdRouteRouteWithChildren;
  BooksIndexRoute: typeof BooksIndexRoute;
  AboutIndexLazyRoute: typeof AboutIndexLazyRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BooksBookIdRouteRoute: BooksBookIdRouteRouteWithChildren,
  BooksIndexRoute: BooksIndexRoute,
  AboutIndexLazyRoute: AboutIndexLazyRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/books/$bookId",
        "/books/",
        "/about/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/books/$bookId": {
      "filePath": "books/$bookId/route.tsx",
      "children": [
        "/books/$bookId/reviews",
        "/books/$bookId/"
      ]
    },
    "/books/": {
      "filePath": "books/index.tsx"
    },
    "/about/": {
      "filePath": "about/index.lazy.tsx"
    },
    "/books/$bookId/reviews": {
      "filePath": "books/$bookId/reviews/route.tsx",
      "parent": "/books/$bookId",
      "children": [
        "/books/$bookId/reviews/"
      ]
    },
    "/books/$bookId/": {
      "filePath": "books/$bookId/index.tsx",
      "parent": "/books/$bookId"
    },
    "/books/$bookId/reviews/": {
      "filePath": "books/$bookId/reviews/index.tsx",
      "parent": "/books/$bookId/reviews"
    }
  }
}
ROUTE_MANIFEST_END */
