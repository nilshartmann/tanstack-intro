/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from "@tanstack/react-router";

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as IndexImport } from "./routes/index";
import { Route as BooksIndexImport } from "./routes/books/index";
import { Route as BooksBookIdIndexImport } from "./routes/books/$bookId/index";

// Create Virtual Routes

const AboutLazyImport = createFileRoute("/about")();

// Create/Update Routes

const AboutLazyRoute = AboutLazyImport.update({
  path: "/about",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/about.lazy").then((d) => d.Route));

const IndexRoute = IndexImport.update({
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

const BooksIndexRoute = BooksIndexImport.update({
  path: "/books/",
  getParentRoute: () => rootRoute,
} as any);

const BooksBookIdIndexRoute = BooksBookIdIndexImport.update({
  path: "/books/$bookId/",
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    "/about": {
      id: "/about";
      path: "/about";
      fullPath: "/about";
      preLoaderRoute: typeof AboutLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/books/": {
      id: "/books/";
      path: "/books";
      fullPath: "/books";
      preLoaderRoute: typeof BooksIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/books/$bookId/": {
      id: "/books/$bookId/";
      path: "/books/$bookId";
      fullPath: "/books/$bookId";
      preLoaderRoute: typeof BooksBookIdIndexImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/about": typeof AboutLazyRoute;
  "/books": typeof BooksIndexRoute;
  "/books/$bookId": typeof BooksBookIdIndexRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/about": typeof AboutLazyRoute;
  "/books": typeof BooksIndexRoute;
  "/books/$bookId": typeof BooksBookIdIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexRoute;
  "/about": typeof AboutLazyRoute;
  "/books/": typeof BooksIndexRoute;
  "/books/$bookId/": typeof BooksBookIdIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "/" | "/about" | "/books" | "/books/$bookId";
  fileRoutesByTo: FileRoutesByTo;
  to: "/" | "/about" | "/books" | "/books/$bookId";
  id: "__root__" | "/" | "/about" | "/books/" | "/books/$bookId/";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  AboutLazyRoute: typeof AboutLazyRoute;
  BooksIndexRoute: typeof BooksIndexRoute;
  BooksBookIdIndexRoute: typeof BooksBookIdIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutLazyRoute: AboutLazyRoute,
  BooksIndexRoute: BooksIndexRoute,
  BooksBookIdIndexRoute: BooksBookIdIndexRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/books/",
        "/books/$bookId/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/books/": {
      "filePath": "books/index.tsx"
    },
    "/books/$bookId/": {
      "filePath": "books/$bookId/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
